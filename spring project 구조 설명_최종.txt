1. src/main/java
필요한 main 패키지 구성
- controller : spring 전반적인 명령 처리
페이지 이동, 필요한 메서드 작성
controller는 service를 통해 각종 데이터에 접근 / jsp에 파라미터를 뿌려줄 수 있다
>> 각자 본인이 필요한 컨트롤러 구현해서 개발하기

- exception : 예외처리 - 예림
잘못된 파라미터를 가져오거나 잘못된 경로로 이동 시 
spring 에러 페이지가 아닌 개발자가 구현한 에러페이지로 이동하도록 설정

- mapper : 인터페이스형
>> 인터페이스로 만들기 때문에 해당 인터페이스에서 구현할 영역을 정해주어야 함.
여기서 구현하는 부분은
src/main/resources의 config/mybatis/mapper의 xml 파일이다.
해당 xml파일에서 쿼리문을 작성, 사용한다

- service : mapper를 autowired로 받는다.
mapper에서 xml의 쿼리문으로 받아온 파라미터들을 사용할 수 있다.

- vo
db 연결 데이터값 정의

2. src/main/resources

- config.mybatis
db.properties : db 연결 driver/url/user/pwd 정의파일
mybatis-config.xml : config.mybati.mapper 안의 xml 파일에서 쓸 별칭을 정해줄 수 있음
대표적으로 vo.UserVO 를 xml에서는 user로 쓸 것이라 별칭 정의

- config.mybatis.mapper
쿼리문 작성 xml 파일
resultType으로 mybatis-config.xml에서 정의한 별칭을 쓸 수 있다.

- config.spring.context :: 원래 spring에서의 root-context.xml
>> conponent 관련 bean 생성 xml 파일

1 - datasource.xml : db연결 라이브러리 객체 생성 (건드릴 부분 없음)
2 - mybatis.xml : 어떤 db , 매퍼로 접근할 것인지 위치를 알려준다.
<property name="configLocation" value="classpath:config/mybatis/mybatis-config.xml"/> : db연결 xml 파일 인식
<property name="mapperLocations" value="classpath:config/mybatis/mapper/*.xml"/> : 매퍼 연결 xml 파일 인식
3 - dao.xml
<context:component-scan base-package="com.project.service"/> : 서비스 객체 자동생성 인식
<mybatis-spring:scan base-package="com.project.mapper"/> : mybatis-mapper 어노테이션 인식

- config.spring.mvc
servlet-context.xml : controller bean 생성
 : 컨트롤러 자동생성 >> src/main/java에서 컨트롤러 생성, 어노테이션 선언 시
여기에 해당 패키지를 
<context:component-scan base-package="com.project.exception" />
<context:component-scan base-package="com.project.controller" />
<context:component-scan base-package="com.project.controller.user" />
이런식으로 선언해 주어야 spring에서 컨트롤러를 인식한다.


